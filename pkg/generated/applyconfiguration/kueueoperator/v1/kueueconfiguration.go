/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// KueueConfigurationApplyConfiguration represents a declarative configuration of the KueueConfiguration type for use
// with apply.
type KueueConfigurationApplyConfiguration struct {
	Integrations       *IntegrationsApplyConfiguration       `json:"integrations,omitempty"`
	WorkloadManagement *WorkloadManagementApplyConfiguration `json:"workloadManagement,omitempty"`
	GangScheduling     *GangSchedulingApplyConfiguration     `json:"gangScheduling,omitempty"`
	Preemption         *PreemptionApplyConfiguration         `json:"preemption,omitempty"`
	Resources          *ResourcesApplyConfiguration          `json:"resources,omitempty"`
}

// KueueConfigurationApplyConfiguration constructs a declarative configuration of the KueueConfiguration type for use with
// apply.
func KueueConfiguration() *KueueConfigurationApplyConfiguration {
	return &KueueConfigurationApplyConfiguration{}
}

// WithIntegrations sets the Integrations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Integrations field is set to the value of the last call.
func (b *KueueConfigurationApplyConfiguration) WithIntegrations(value *IntegrationsApplyConfiguration) *KueueConfigurationApplyConfiguration {
	b.Integrations = value
	return b
}

// WithWorkloadManagement sets the WorkloadManagement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadManagement field is set to the value of the last call.
func (b *KueueConfigurationApplyConfiguration) WithWorkloadManagement(value *WorkloadManagementApplyConfiguration) *KueueConfigurationApplyConfiguration {
	b.WorkloadManagement = value
	return b
}

// WithGangScheduling sets the GangScheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GangScheduling field is set to the value of the last call.
func (b *KueueConfigurationApplyConfiguration) WithGangScheduling(value *GangSchedulingApplyConfiguration) *KueueConfigurationApplyConfiguration {
	b.GangScheduling = value
	return b
}

// WithPreemption sets the Preemption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Preemption field is set to the value of the last call.
func (b *KueueConfigurationApplyConfiguration) WithPreemption(value *PreemptionApplyConfiguration) *KueueConfigurationApplyConfiguration {
	b.Preemption = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *KueueConfigurationApplyConfiguration) WithResources(value *ResourcesApplyConfiguration) *KueueConfigurationApplyConfiguration {
	b.Resources = value
	return b
}
