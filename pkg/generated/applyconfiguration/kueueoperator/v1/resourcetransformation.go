/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	kueueoperatorv1 "github.com/openshift/kueue-operator/pkg/apis/kueueoperator/v1"
)

// ResourceTransformationApplyConfiguration represents a declarative configuration of the ResourceTransformation type for use
// with apply.
type ResourceTransformationApplyConfiguration struct {
	Input    *string                                         `json:"input,omitempty"`
	Strategy *kueueoperatorv1.ResourceTransformationStrategy `json:"strategy,omitempty"`
	Outputs  []ResourceOutputApplyConfiguration              `json:"outputs,omitempty"`
}

// ResourceTransformationApplyConfiguration constructs a declarative configuration of the ResourceTransformation type for use with
// apply.
func ResourceTransformation() *ResourceTransformationApplyConfiguration {
	return &ResourceTransformationApplyConfiguration{}
}

// WithInput sets the Input field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Input field is set to the value of the last call.
func (b *ResourceTransformationApplyConfiguration) WithInput(value string) *ResourceTransformationApplyConfiguration {
	b.Input = &value
	return b
}

// WithStrategy sets the Strategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Strategy field is set to the value of the last call.
func (b *ResourceTransformationApplyConfiguration) WithStrategy(value kueueoperatorv1.ResourceTransformationStrategy) *ResourceTransformationApplyConfiguration {
	b.Strategy = &value
	return b
}

// WithOutputs adds the given value to the Outputs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Outputs field.
func (b *ResourceTransformationApplyConfiguration) WithOutputs(values ...*ResourceOutputApplyConfiguration) *ResourceTransformationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOutputs")
		}
		b.Outputs = append(b.Outputs, *values[i])
	}
	return b
}
